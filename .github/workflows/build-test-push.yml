name: Build & Test & Push

on:
  push:



jobs:


  build-testimg:
    runs-on: ubuntu-latest
    steps:

      -
        name: Checkout
        uses: actions/checkout@v4

      -
        name: Build image
        run: |
          docker compose build

      -
        name: Archive built image
        run: |
          docker save -o /tmp/image.tar "localbuild-hmdns"

      -
        name: Upload built image
        uses: actions/upload-artifact@v3
        with:
          name: image
          path: /tmp/image.tar




  test-healthy:
    runs-on: ubuntu-latest
    needs: build-testimg
    steps:

      -
        name: Download built image
        uses: actions/download-artifact@v3
        with:
          name: image
          path: /tmp

      -
        name: Load image
        run: |
          docker load --input /tmp/image.tar

      -
        name: Run container
        run: |
          docker run -d --network host \
                 --health-cmd "/healthcheck" --name "localbuild-hmdns" \
                 "localbuild-hmdns" \
                 || exit 1

      -
        name: Test
        run: |
          timeout 120 sh -c "until docker exec localbuild-hmdns healthcheck; do sleep 1; done" \
                  || { docker logs localbuild-hmdns; exit 1; }


  test-when-no-hostfile:
    runs-on: ubuntu-latest
    needs: build-testimg
    steps:

      -
        name: Download built image
        uses: actions/download-artifact@v3
        with:
          name: image
          path: /tmp

      -
        name: Load image
        run: |
          docker load --input /tmp/image.tar

      -
        name: Run container
        run: |
          docker run -d --network host \
                 --health-cmd "/healthcheck" --name "localbuild-hmdns" \
                 "localbuild-hmdns" \
                 || exit 1

          timeout 120 sh -c "until docker exec localbuild-hmdns healthcheck; do sleep 1; done" \
                  || exit 1

      -
        name: Test
        run: |
          # remove hostfile
          docker exec "localbuild-hmdns" rm /config/hosts \
                 || { docker logs localbuild-hmdns; exit 1; }

          # check if healthy state persists
          {
              timeout 60 sh -c "while docker exec localbuild-hmdns healthcheck; do sleep 1; done";
              [ "${?}" = 124 ];
          } || { docker logs localbuild-hmdns; exit 1; }   # true if timeout


  test-hostfile-change-reload:
    runs-on: ubuntu-latest
    needs: build-testimg
    steps:

      -
        name: Download built image
        uses: actions/download-artifact@v3
        with:
          name: image
          path: /tmp

      -
        name: Load image
        run: |
          docker load --input /tmp/image.tar

      -
        name: Run container
        run: |
          docker run -d --network host \
                 --health-cmd "/healthcheck" --name "localbuild-hmdns" \
                 "localbuild-hmdns" \
                 || exit 1

          timeout 120 sh -c "until docker exec localbuild-hmdns healthcheck; do sleep 1; done" \
                  || exit 1

      -
        name: Test
        run: |

          TEST_DOMAIN="write.__testdomain.local"
          TEST_IP="127.100.100.100"
          WRITE_TESTSTR="${TEST_IP} ${TEST_DOMAIN}"

          # write hostfile and check if set
          printf "%s\n" "${WRITE_TESTSTR}" \
                 | docker exec -i "localbuild-hmdns" hostfile write \
                 || { docker logs localbuild-hmdns; exit 1; }
          [ "$(docker exec "localbuild-hmdns" hostfile read)" = "${WRITE_TESTSTR}" ] \
                 || { docker logs localbuild-hmdns; exit 1; }

          # check if reloaded configuration works
          timeout 60 sh -c "until RESOLVED_IP=\"\$(docker exec localbuild-hmdns multicast-dns \"${TEST_DOMAIN}\" 2>/dev/null)\" && [ \"\${RESOLVED_IP}\" = \"${TEST_IP}\" ]; do printf \" - Resolved IP: [%s], Written IP: [%s]\n\" \"\${RESOLVED_IP}\" \"${TEST_IP}\"; sleep 5; done" \
                  || { docker logs localbuild-hmdns; exit 1; }


  test-invalid-target-ip:
    runs-on: ubuntu-latest
    needs: build-testimg
    steps:

      -
        name: Download built image
        uses: actions/download-artifact@v3
        with:
          name: image
          path: /tmp

      -
        name: Load image
        run: |
          docker load --input /tmp/image.tar

      -
        name: Run container
        run: |
          docker run -d --network host \
                 --health-cmd "/healthcheck" --name "localbuild-hmdns" \
                 "localbuild-hmdns" \
                 || exit 1

          timeout 120 sh -c "until docker exec localbuild-hmdns healthcheck; do sleep 1; done" \
                  || exit 1

      -
        name: Test
        run: |

          TEST_DOMAIN_1="invalid-ip-1.__testdomain.local"
          TEST_IP_1="127.100.256.100"
          TEST_DOMAIN_2="invalid-ip-2.__testdomain.local"
          TEST_IP_2="127.310.100.100"
          TEST_DOMAIN_3="invalid-ip-3.__testdomain.local"
          TEST_IP_3="1000.100.100.100"
          TEST_DOMAIN_4="invalid-ip-4.__testdomain.local"
          TEST_IP_4="anystring"
          TEST_DOMAIN_5="invalid-ip-5.__testdomain.local"
          TEST_IP_5="127.100.100.100."
          TEST_DOMAIN_6="invalid-ip-6.__testdomain.local"
          TEST_IP_6="127.100.100"
          IP_TESTSTR="$(printf "%s %s\n%s %s\n%s %s\n%s %s\n%s %s\n%s %s\n" \
                               "${TEST_IP_1}" "${TEST_DOMAIN_1}" \
                               "${TEST_IP_2}" "${TEST_DOMAIN_2}" \
                               "${TEST_IP_3}" "${TEST_DOMAIN_3}" \
                               "${TEST_IP_4}" "${TEST_DOMAIN_4}" \
                               "${TEST_IP_5}" "${TEST_DOMAIN_5}" \
                               "${TEST_IP_6}" "${TEST_DOMAIN_6}" \
                               )"

          # write hostfile and check if set
          printf "%s\n" "${IP_TESTSTR}" \
                 | docker exec -i "localbuild-hmdns" hostfile write \
                 || { docker logs localbuild-hmdns; exit 1; }

          # check if healthy state persists
          {
              timeout 90 sh -c "while ! docker exec localbuild-hmdns multicast-dns \"${TEST_DOMAIN_1}\" && ! docker exec localbuild-hmdns multicast-dns \"${TEST_DOMAIN_2}\" && ! docker exec localbuild-hmdns multicast-dns \"${TEST_DOMAIN_3}\" && ! docker exec localbuild-hmdns multicast-dns \"${TEST_DOMAIN_4}\" && ! docker exec localbuild-hmdns multicast-dns \"${TEST_DOMAIN_5}\" && ! docker exec localbuild-hmdns multicast-dns \"${TEST_DOMAIN_6}\"; do sleep 1; done";
              [ "${?}" = 124 ];
          } || { docker logs localbuild-hmdns; exit 1; }   # true if timeout


  test-invalid-src-domain:
    runs-on: ubuntu-latest
    needs: build-testimg
    steps:

      -
        name: Download built image
        uses: actions/download-artifact@v3
        with:
          name: image
          path: /tmp

      -
        name: Load image
        run: |
          docker load --input /tmp/image.tar

      -
        name: Run container
        run: |
          docker run -d --network host \
                 --health-cmd "/healthcheck" --name "localbuild-hmdns" \
                 "localbuild-hmdns" \
                 || exit 1

          timeout 120 sh -c "until docker exec localbuild-hmdns healthcheck; do sleep 1; done" \
                  || exit 1

      -
        name: Test
        run: |

          TEST_IP="127.254.254.0"
          TEST_DOMAIN_1="invalid-domain-1.__testdomain.localhost"
          TEST_DOMAIN_2="invalid-domain-2local"
          TEST_DOMAIN_3="invalid-domain-3.com"
          TEST_DOMAIN_4="invalid-domain-4.local.net"
          TEST_DOMAIN_5="invalid-domain"
          TEST_DOMAIN_6=".local"
          DOMAIN_TESTSTR="$(printf "%s %s\n%s %s\n%s %s\n%s %s\n%s %s\n%s %s\n" \
                                   "${TEST_IP}" "${TEST_DOMAIN_1}" \
                                   "${TEST_IP}" "${TEST_DOMAIN_2}" \
                                   "${TEST_IP}" "${TEST_DOMAIN_3}" \
                                   "${TEST_IP}" "${TEST_DOMAIN_4}" \
                                   "${TEST_IP}" "${TEST_DOMAIN_5}" \
                                   "${TEST_IP}" "${TEST_DOMAIN_6}" \
                                   )"

          # write hostfile and check if set
          printf "%s\n" "${DOMAIN_TESTSTR}" \
                 | docker exec -i "localbuild-hmdns" hostfile write \
                 || { docker logs localbuild-hmdns; exit 1; }

          # check if healthy state persists
          {
              timeout 90 sh -c "while ! docker exec localbuild-hmdns multicast-dns \"${TEST_DOMAIN_1}\" && ! docker exec localbuild-hmdns multicast-dns \"${TEST_DOMAIN_2}\" && ! docker exec localbuild-hmdns multicast-dns \"${TEST_DOMAIN_3}\" && ! docker exec localbuild-hmdns multicast-dns \"${TEST_DOMAIN_4}\" && ! docker exec localbuild-hmdns multicast-dns \"${TEST_DOMAIN_5}\" && ! docker exec localbuild-hmdns multicast-dns \"${TEST_DOMAIN_6}\"; do sleep 1; done";
              [ "${?}" = 124 ];
          } || { docker logs localbuild-hmdns; exit 1; }   # true if timeout




  test-hostfile-sync:
    runs-on: ubuntu-latest
    needs: build-testimg
    steps:

      -
        name: Download built image
        uses: actions/download-artifact@v3
        with:
          name: image
          path: /tmp

      -
        name: Load image
        run: |
          docker load --input /tmp/image.tar

      -
        name: Run container
        run: |

          # parent
          docker run -d --network host \
                 --health-cmd "/healthcheck" --name "localbuild-hmdns" \
                 "localbuild-hmdns" \
                 || exit 1

          # child
          export HMDNS_PARENT_HOSTNAME=localhost
          export HMDNS_PORT=5354
          docker run -d --network host \
                 --health-cmd "/healthcheck" --name "localbuild-hmdns-child" \
                 -e HMDNS_PARENT_HOSTNAME -e HMDNS_PORT \
                 "localbuild-hmdns" \
                 || exit 1

          timeout 120 sh -c "until docker exec localbuild-hmdns healthcheck && docker exec localbuild-hmdns-child healthcheck; do sleep 1; done" \
                  || exit 1

      -
        name: Test
        run: |

          TEST_DOMAIN="sync.__testdomain.local"
          TEST_IP="127.200.200.200"
          SYNC_TESTSTR="${TEST_IP} ${TEST_DOMAIN}"

          # write hostfile and check if synced in child hostfile
          printf "%s\n" "${SYNC_TESTSTR}" \
                 | docker exec -i "localbuild-hmdns" hostfile write || exit 1
          timeout 120 sh -c "until CHILD_HOSTS=\"\$(docker exec \"localbuild-hmdns-child\" hostfile read 2>/dev/null)\" && [ \"\${CHILD_HOSTS}\" = \"${SYNC_TESTSTR}\" ]; do printf \" - Child hostfile: [%s], Original teststr: [%s]\n\" \"\${CHILD_HOSTS}\" \"${SYNC_TESTSTR}\"; sleep 5; done" \
                 || { docker logs localbuild-hmdns; exit 1; }





  build-and-push-release:
    runs-on: ubuntu-latest
    needs:
      - build-testimg
      - test-healthy
      - test-when-no-hostfile
      - test-hostfile-change-reload
      - test-invalid-target-ip
      - test-invalid-src-domain
      - test-hostfile-sync
    if: startsWith(github.event.ref, 'refs/tags/v')
    steps:

      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build & Push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/hostfile-mdns:${{ github.ref_name }}, ${{ secrets.DOCKERHUB_USERNAME }}/hostfile-mdns:latest
          file: Containerfile
          platforms: linux/amd64, linux/arm64
